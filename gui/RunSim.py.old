import threading
from lib import *
import numpy as NP

import sys
import math
import numpy
from libmpush1 import *
from fomplib import *
from fgraf1 import *
from dtimer import *

import sys

import matplotlib.pyplot as plt
import matplotlib

from Graphs import *
from Events import *

import sys
sys.path.append('/bigdrive/Dropbox/Plasma/beps-desktop/new_beps1.source/python_version')
from ProceduralInterface import *

"""class MyTime:
	def __init__(self):
		self.value = 0

class PContext(PlasmaContext):
	def __init__(self):
		self.curTime = 0
		self.graphEnabled = True
		self.timeDir = MyTime()

	def _sendplot(self, obj):
		#self.parent_conn.send(obj)
		if self.graphEnabled:
			wx.PostEvent(self._notify_window, ResultEvent(obj, self.curTime))"""


int_type = numpy.int32
double_type = numpy.float64
#if (minit1.fprecision()==0):
float_type = numpy.float32
complex_type = numpy.complex64

def initPlasma(in1):
   in1.idimp = 2; in1.ipbc = 1
   # wke/we = particle kinetic/electric field
   in1.wke = numpy.zeros((1),float_type)
   in1.we = numpy.zeros((1),float_type)
   # list = (true,false) = list of particles leaving tiles found in push
   list = True

   # declare scalars for standard code
   in1.ws = numpy.zeros((1),float_type)

   # declare scalars for OpenMP code
   in1.nppmx = numpy.empty((1),int_type)
   in1.irc = numpy.zeros((1),int_type)

   # declare scalars for diagnostics
   # iuin = 8; iuot = 18; iudm = 19
   in1.iude = 10; in1.iup = 11; in1.iuel = 12

   # declare and initialize timing data
   in1.tinit = 0.0; in1.tloop = 0.0
   in1.itime = numpy.empty((4),numpy.int32)
   in1.ltime = numpy.empty((4),numpy.int32)
   in1.tdpost = numpy.zeros((1),float_type)
   in1.tguard = numpy.zeros((1),float_type)
   in1.tfft = numpy.zeros((1),float_type)
   in1.tfield = numpy.zeros((1),float_type)
   in1.tpush = numpy.zeros((1),float_type)
   in1.tsort = numpy.zeros((1),float_type)
   in1.tdiag = numpy.zeros((1),float_type)
   in1.dtime = numpy.empty((1),double_type)

   # start timing initialization
   dtimer(in1.dtime,in1.itime,-1)
   # read namelist
   #open(unit=iuin,file='input1',form='formatted',status='old')
   in1.iuin = open("input1","r")
   #read (iuin,input1)
   # override input data
   in1.idcode = 1
   in1.ndim = 1

   # debug; namelist not yet supported
   in1.idrun = 1
   in1.nvp = 0
   in1.npx = 409600; in1.npxb = 40960
   in1.indx =  11
   in1.mx = 32
   in1.tend = 45.000; in1.dt = 0.1
   in1.qme = -1.0; in1.vtx = 1.0; in1.vty = 1.0; in1.vtz = 1.0
   in1.vx0 = 0.0; in1.vy0 = 0.0; in1.vz0 = 0.0
   in1.mzf = 0
   in1.ax = 0.912871
   in1.nextrand = 0
   in1.vtdx = 0.5; in1.vtdy = 0.5; in1.vtdz = 0.5
   in1.vdx = 5.0; in1.vdy = 5.0; in1.vdz = 5.0
   in1.xtras = 0.2
   #ntw = 1; ntde = 5; ntp = 5; ntel = 5; ntv = 5

   in1.ntel = 0;
   in1.ntde = 1
   in1.ntt = 0
   in1.nts = 1
   in1.ntv = 1
   in1.ntp = 1
   in1.ntw = 1
   in1.ntphi = 0

   in1.nmv = 40
   #nst = 2; nprobt = 10
   #vtsx = 0.0; dvtx = 0.1
   in1.nst = 3; in1.nprobt = 0
   in1.vtsx = 3.0; in1.dvtx = 0.1
   in1.modesxde = 41; in1.modesxp = 41; in1.modesxel = 41
   in1.movion = 0
   in1.amodex = 0.0; in1.freq = 0.0; in1.trmp = 0.0; in1.toff = 0.0
   in1.el0 = 0.0; in1.er0 = 0.0
   in1.ci = 0.1
   in1.relativity = 0
   in1.treverse = 0
   in1.nplot = 0
   in1.t0 = 0.0
   in1.nderec = 0; in1.nprec = 0; in1.nelrec = 0

   # create string from idrun
   in1.cdrun = str(in1.idrun)
   # text output file
   in1.fname = "output1." + in1.cdrun
   #     open(unit=iuot,file=trim(fname),form='formatted',status='replace')
   in1.iuot = open(in1.fname,"w")
   #nvp = int(input("enter number of nodes: "))
   # initialize for shared memory parallel processing
   omplib.init_omp(in1.nvp)

   # open graphics device
   in1.irc[0] = graf1.open_graphs(in1.nplot)

   # initialize scalars for standard code
   if (in1.ntt > 0):
      in1.idimp = in1.idimp + 1
   # np = total number of particles in simulation
   # nx = number of grid points in x direction
   in1.np = in1.npx + in1.npxb; in1.nx = int(math.pow(2,in1.indx)); in1.nxh = int(in1.nx/2)
   in1.nxe = in1.nx + 2; in1.nxeh = in1.nxe/2
   # mx1 = number of tiles in x direction
   in1.mx1 = int((in1.nx - 1)/in1.mx + 1)
   # nloop = number of time steps in simulation
   # ntime = current time step
   in1.nloop = int(in1.tend/in1.dt + .0001); ntime = 0
   in1.qbme = in1.qme
   in1.affp = float(in1.nx)/float(in1.np)

   # check for unimplemented features
   if (list):
      if (in1.ipbc != 1):
         print "ipbc != 1 and list = True not yet supported"
         list = False
         print "list reset to False"

   # allocate data for standard code
   # part = particle array
   in1.part = numpy.empty((in1.idimp,in1.np),float_type,'F')
   # qe = electron charge density with guard cells
   in1.qe = numpy.empty((in1.nxe),float_type,'F')
   # fxe = smoothed electric field with guard cells
   in1.fxe = numpy.empty((in1.nxe),float_type,'F')
   # ffc = form factor array for poisson solver
   in1.ffc = numpy.empty((in1.nxh),complex_type,'F')
   # mixup = bit reverse table for FFT
   in1.mixup = numpy.empty((in1.nxh),int_type,'F')
   # sct = sine/cosine table for FFT
   in1.sct = numpy.empty((in1.nxh),complex_type,'F')
   # kpic = number of particles in each tile
   in1.kpic = numpy.empty((in1.mx1),int_type,'F')

   # prepare fft tables
   mfft1.mfft1_init(in1.mixup,in1.sct,in1.indx)
   # calculate form factors
   mfield1.mpois1_init(in1.ffc,in1.ax,in1.affp,in1.nx)
   # initialize different ensemble of random numbers
   if (in1.nextrand > 0):
      minit1.mnextran1(in1.nextrand,in1.ndim,in1.np)
   # initialize particles
   in1.it = in1.npx + 1
   # background electrons
   if (in1.npx > 0):
      minit1.mudistr1(in1.part,1,in1.npx,in1.nx,in1.ipbc)
      minit1.mvdistr1(in1.part,1,in1.vtx,in1.vx0,in1.npx)
   # beam electrons
   if (in1.npxb > 0):
      minit1.mudistr1(in1.part,in1.it,in1.npxb,in1.nx,in1.ipbc)
      minit1.mvdistr1(in1.part,in1.it,in1.vtdx,in1.vdx,in1.npxb)

   # find number of particles in each of mx, tiles: updates kpic, nppmx
   minit1.mdblkp2(in1.part,in1.kpic,in1.nppmx,in1.mx,in1.irc)

   # allocate vector particle data
   in1.nppmx0 = int((1.0 + in1.xtras)*in1.nppmx)
   in1.ntmax = int(in1.xtras*in1.nppmx)
   in1.npbmx = int(in1.xtras*in1.nppmx)
   # ppart = tiled particle array
   in1.ppart = numpy.empty((in1.idimp,in1.nppmx0,in1.mx1),float_type,'F')
   # ppbuff = buffer array for reordering tiled particle array
   in1.ppbuff = numpy.empty((in1.idimp,in1.npbmx,in1.mx1),float_type,'F')
   # ncl = number of particles departing tile in each direction
   in1.ncl = numpy.empty((2,in1.mx1),int_type,'F')
   # ihole = location/destination of each particle departing tile
   in1.ihole = numpy.empty((2,in1.ntmax+1,in1.mx1),int_type,'F')

   # copy ordered particle data for OpenMP: updates ppart and kpic
   mpush1.mpmovin1(in1.part,in1.ppart,in1.kpic,in1.mx,in1.irc)

   # sanity check
   mpush1.mcheck1(in1.ppart,in1.kpic,in1.nx,in1.mx,in1.irc)

   #Read the time direction from the GUI
   in1.treverse = pc.timeDir.value

   # allocate diagnostic arrays
   # reverse simulation at end back to start

   if (in1.treverse==1):
      in1.nloop = 2*in1.nloop
   # energy time history
   if (in1.ntw > 0):
      in1.it = int((in1.nloop - 1)/in1.ntw + 1); in1.itw = 0
   # wt = energy time history array
      in1.wt = numpy.zeros((in1.it,4+in1.movion),float_type,'F')
      in1.timeHistory = numpy.zeros(in1.it,float_type,'F')
   # allocate scratch arrays for scalar fields
   if ((in1.ntde > 0) or (in1.ntp > 0) or (in1.ntel > 0)):
      in1.sfieldc = numpy.empty((in1.nxh),complex_type,'F')
      in1.sfield = numpy.empty((in1.nxe),float_type,'F')
   # electron density diagnostic
   if (in1.ntde > 0):
      in1.fdename = "denek1." + in1.cdrun
      in1.modesxde = int(min(in1.modesxde,in1.nxh+1))
      in1.denet = numpy.empty((in1.modesxde),complex_type,'F')
   # open file: updates nderec and possibly iude
      if (in1.nderec==0):
         in1.nderec = numpy.zeros((1),int_type)
         mdiag1.dafopennc1(in1.denet,in1.iude,in1.nderec,in1.fdename)
   # potential diagnostic
   if (in1.ntp > 0):
      in1.fpname = "potk1." + in1.cdrun
      in1.modesxp = int(min(in1.modesxp,in1.nxh+1))
      in1.pott = numpy.empty((in1.modesxp),complex_type,'F')
   # open file: updates nprec and possibly iup
      if (in1.nprec==0):
         in1.nprec = numpy.zeros((1),int_type)
         mdiag1.dafopennc1(in1.pott,in1.iup,in1.nprec,in1.fpname)
   # longitudinal efield diagnostic
   if (in1.ntel > 0):
      in1.felname = "elk1." + in1.cdrun
      in1.modesxel = int(min(in1.modesxel,in1.nxh+1))
      in1.elt = numpy.empty((in1.modesxel),complex_type,'F')
   # open file: updates nelrec and possibly iuel
      if (in1.nelrec==0):
         in1.nelrec = numpy.zeros((1),int_type)
         mdiag1.dafopennc1(in1.elt,in1.iuel,in1.nelrec,in1.felname)
   # velocity diagnostic
   if (in1.ntv > 0):
      in1.sfv = numpy.empty((2*in1.nmv+2,1,in1.mx1+1),float_type,'F')
      in1.fvm = numpy.empty((3,1),float_type,'F')
      in1.sfv[0,:,:] = 2.0*int(max(4.0*in1.vtx+abs(in1.vx0),4.0*in1.vtdx+abs(in1.vdx)))
   # trajectory diagnostic
   if (in1.ntt > 0):
      in1.iprobt = numpy.empty((in1.nprobt),numpy.int32)
      in1.mprobt = numpy.zeros((1),int_type)
      mdiag1.setptraj1(in1.ppart,in1.kpic,in1.iprobt,in1.nst,in1.vtx,in1.vtsx,in1.dvtx,in1.np,in1.mprobt)
      in1.nprobt = in1.mprobt[0]
      if (in1.nprobt > 16777215):
         print "nprobt overflow = ", in1.nprobt
         exit(1)
      in1.partt = numpy.empty((in1.idimp,in1.nprobt),float_type,'F')
      if ((in1.nst==1) or (in1.nst==2)):
         in1.it = int((in1.nloop - 1)/in1.ntt + 1); in1.itt = 0
         in1.partd = numpy.empty((in1.it,in1.idimp,in1.nprobt),float_type,'F')
      elif (in1.nst==3):
         in1.fvt = numpy.empty((2*in1.nmv+2,1),float_type,'F')
         in1.fvmt = numpy.empty((3,1),float_type,'F')
         in1.fvt[0,:] = 2.0*int(max(4.0*in1.vtx+abs(in1.vx0),4.0*in1.vtdx+abs(in1.vdx)))

   # initialization time
   dtimer(in1.dtime,in1.itime,1)
   in1.tinit = in1.tinit + float(in1.dtime)
   # start timing loop
   dtimer(in1.dtime,in1.ltime,-1)


   in1.phikw = []
   in1.phikw_time = []
   in1.phikw_dta = []

   in1.iuot.write("program mbeps1\n")

   # * * * start main iteration loop * * *
   in1.curtime = 0.0

def step(ntime, in1):
   in1.iuot.write("ntime = "+str(ntime)+"\n")
   pc.setTime(in1.curtime)
	# deposit charge with OpenMP: updates qe
   dtimer(in1.dtime,in1.itime,-1)
   in1.qe.fill(0.0)
   dtimer(in1.dtime,in1.itime,1)
   in1.tdpost[0] = in1.tdpost[0] + float(in1.dtime)
   mpush1.mpost1(in1.ppart,in1.qe,in1.kpic,in1.qme,in1.tdpost,in1.mx)

   # add guard cells with standard procedure: updates qe
   mgard1.maguard1(in1.qe,in1.tguard,in1.nx)

   # transform charge to fourier space with standard procedure:
   # updates qe
   in1.isign = -1
   mfft1.mfft1r(in1.qe,in1.isign,in1.mixup,in1.sct,in1.tfft,in1.indx)

   # electron density diagnostic
   if (in1.ntde > 0):
      in1.it = int(ntime/in1.ntde)
      if (ntime==in1.ntde*in1.it):
   # calculate smoothed density in fourier space: updates sfieldc
         mfield1.msmooth1(in1.qe,in1.sfieldc,in1.ffc,in1.tfield,in1.nx)
   # store selected fourier modes: updates denet
         mfield1.mrdmodes1(in1.sfieldc,in1.denet,in1.tfield,in1.nx,in1.modesxde)
   # write diagnostic output: updates nderec
         mdiag1.dafwritec1(in1.denet,in1.tdiag,in1.iude,in1.nderec,in1.modesxde)
   # transform smoothed to real space: updates sfield
         mfft1.mfft1cr(in1.sfieldc,in1.sfield,in1.mixup,in1.sct,in1.tfft,in1.indx)
         mgard1.mdguard1(in1.sfield,in1.tguard,in1.nx)
   # display smoothed electron density
         pc.showDensity(in1.sfield, in1.nx)
         graf1.dscaler1(in1.sfield,' EDENSITY',ntime,999,0,in1.nx,in1.irc)
         if (in1.irc[0]==1):
            exit(1)
         in1.irc[0] = 0

   # calculate force/charge in fourier space with standard procedure:
   # updates fxe, we
   mfield1.mpois1(in1.qe,in1.fxe,in1.ffc,in1.we,in1.tfield,in1.nx)

   # transform force to real space with standard procedure: updates fxe
   in1.isign = 1
   mfft1.mfft1r(in1.fxe,in1.isign,in1.mixup,in1.sct,in1.tfft,in1.indx)

   # add external traveling wave field
   in1.ts = in1.dt*float(ntime)
   mfield1.meaddext1(in1.fxe,in1.tfield,in1.amodex,in1.freq,in1.ts,in1.trmp,in1.toff,in1.el0,in1.er0,in1.nx)

   # copy guard cells with standard procedure: updates fxe
   mgard1.mdguard1(in1.fxe,in1.tguard,in1.nx)

   # potential diagnostic
   if (in1.ntp > 0):
      in1.it = int(ntime/in1.ntp)
      if (ntime==in1.ntp*in1.it):
   # calculate potential in fourier space: updates sfieldc
         mfield1.mpot1(in1.qe,in1.sfieldc,in1.ffc,in1.ws,in1.tfield,in1.nx)
   # store selected fourier modes: updates pott
         mfield1.mrdmodes1(in1.sfieldc,in1.pott,in1.tfield,in1.nx,in1.modesxp)
         in1.phikw.append( NP.array(in1.pott, copy=True) )  #add data to phikw
         in1.phikw_time.append( ntime )
         in1.phikw_dta.append( in1.dt )
   # write diagnostic output: updates nprec
         mdiag1.dafwritec1(in1.pott,in1.tdiag,in1.iup,in1.nprec,in1.modesxp)
   # transform potential to real space: updates sfield
         mfft1.mfft1cr(in1.sfieldc,in1.sfield,in1.mixup,in1.sct,in1.tfft,in1.indx)
         mgard1.mdguard1(in1.sfield,in1.tguard,in1.nx)
   # display potential
         pc.showPotential(in1.sfield)
         graf1.dscaler1(in1.sfield,' POTENTIAL',ntime,999,0,in1.nx,in1.irc)
         if (in1.irc[0]==1):
            exit(1)
         in1.irc[0] = 0

   #Phi diagnostic
   if (in1.ntphi > 0):  #update graphs
      in1.it = ntime/in1.ntphi
      if (ntime==in1.ntphi*in1.it):
         print "Phi"
         pc.showPhi(in1.phikw_time, in1.phikw, in1.phikw_dta, in1.dt)
   #temp_obj = DrawPhi([np.array(self.phikw_time), self.phikw, self.phikw_dta],in1.dt)

   # longitudinal efield diagnostic
   if (in1.ntel > 0):
      in1.it = int(ntime/in1.ntel)
      if (ntime==in1.ntel*in1.it):
   # calculate longitudinal efield in fourier space: updates sfieldc
         mfield1.melfield1(in1.qe,in1.sfieldc,in1.ffc,in1.ws,in1.tfield,in1.nx)
   # store selected fourier modes: updates elt
         mfield1.mrdmodes1(in1.sfieldc,in1.elt,in1.tfield,in1.nx,in1.modesxel)
   # write diagnostic output: updates nelrec
         mdiag1.dafwritec1(in1.elt,in1.tdiag,in1.iuel,in1.nelrec,in1.modesxel)
   # transform longitudinal efield to real space: updates sfield
         mfft1.mfft1cr(in1.sfieldc,in1.sfield,in1.mixup,in1.sct,in1.tfft,in1.indx)
         mgard1.mdguard1(in1.sfield,in1.tguard,in1.nx)
   # display potential
         pc.showScaler(in1.sfield, "LONEFIELD", in1.nx, ntime)
         graf1.dscaler1(in1.sfield,' ELFIELD',ntime,999,0,in1.nx,in1.irc)
         if (in1.irc[0]==1):
            exit(1)
         in1.irc[0] = 0

   # velocity diagnostic
   if (in1.ntv > 0):
      in1.it = int(ntime/in1.ntv)
      if (ntime==in1.ntv*in1.it):
   # calculate particle distribution function and moments
         mdiag1.mvpdist1(in1.ppart,in1.kpic,in1.sfv,in1.fvm,in1.tdiag,in1.np,in1.nmv)
   # display velocity distributions
         graf1.displayfv1(in1.sfv[:,:,in1.mx1],in1.fvm,' ELECTRON',ntime,in1.nmv,2,in1.irc)
         pc.showVelocity(in1.sfv[:,:,in1.mx1], fvm=in1.fvm)
         if (in1.irc[0]==1):
            exit(1)
         in1.irc[0] = 0

   # trajectory diagnostic
   if (in1.ntt > 0):
      in1.it = int(ntime/in1.ntt)
      if (ntime==in1.ntt*in1.it):
   # copies trajectories to array partt
         mdiag1.mptraj1(in1.ppart,in1.kpic,in1.partt,in1.tdiag)
         if ((in1.nst==1) or (in1.nst==2)):
            in1.partd[in1.itt,:,:] = in1.partt
            in1.itt = in1.itt + 1
         elif (in1.nst==3):
   # calculate particle distribution function and moments
            mdiag1.mvdist1(in1.partt,in1.fvt,in1.fvmt,in1.tdiag,in1.nprobt,in1.nmv)
   # display velocity distributions
            pc.showTrajectory(in1.fvt)
            graf1.displayfv1(in1.fvt,in1.fvmt,' ELECTRON',ntime,in1.nmv,1,in1.irc)
            if (in1.irc[0]==1):
               exit(1)
            in1.irc[0] = 0

   # phase space diagnostic
   if (in1.nts > 0 and in1.ntv > 0):
      in1.it = int(ntime/in1.nts)
      if (ntime==in1.nts*in1.it):
   # plot particles vx versus x
         pc.showFastPhase(in1.ppart,in1.kpic)
         graf1.dpgrasp13(in1.ppart,in1.kpic,in1.np,' ELECTRON',ntime,999,in1.nx,2,1,in1.npx,
                         in1.irc)
         if (in1.irc[0]==1):
            exit(1)
         in1.irc[0] = 0

   # push particles with OpenMP:
   in1.wke[0] = 0.0
   # updates part, wke and possibly ncl, ihole, and irc
   if (in1.mzf==0):
      mpush1.wmpush1(in1.ppart,in1.fxe,in1.kpic,in1.ncl,in1.ihole,in1.qbme,in1.dt,in1.ci,in1.wke,in1.tpush,in1.nx,
                     in1.mx,in1.ipbc,in1.relativity,list,in1.irc)
   # zero force: updates part, wke and possibly ncl, ihole, and irc
   else:
      mpush1.wmpush1zf(in1.ppart,in1.kpic,in1.ncl,in1.ihole,in1.dt,in1.ci,in1.wke,in1.tpush,in1.nx,in1.mx,in1.ipbc,
                       in1.relativity,list,in1.irc)

   # reorder particles by tile with OpenMP:
   # updates ppart, ppbuff, kpic, ncl, irc, and possibly ihole
   msort1.wmporder1(in1.ppart,in1.ppbuff,in1.kpic,in1.ncl,in1.ihole,in1.tsort,in1.nx,in1.mx,list,in1.irc)

   # start running simulation backwards:
   # need to reverse time lag in leap-frog integeration scheme
   in1.treverse = pc.timeDir.value
   if (in1.treverse==1):
      if (((ntime+1)==(in1.nloop/2)) or ((ntime+1)==in1.nloop)):
         in1.dt = -in1.dt
         in1.ws[0] = 0.0
         mpush1.wmpush1zf(in1.ppart,in1.kpic,in1.ncl,in1.ihole,in1.dt,in1.ci,in1.ws,in1.tpush,in1.nx,in1.mx,
                          in1.ipbc,in1.relativity,list,in1.irc)
         msort1.wmporder1(in1.ppart,in1.ppbuff,in1.kpic,in1.ncl,in1.ihole,in1.tsort,in1.nx,in1.mx,list,
                          in1.irc)

   # energy diagnostic
   if (in1.ntw > 0):
      in1.it = int(ntime/in1.ntw)
      if (ntime==in1.ntw*in1.it):
         in1.ws[0] = in1.we[0] + in1.wke[0]
         in1.iuot.write("Field, Kinetic and Total Energies:\n")
         in1.iuot.write("%14.7e %14.7e %14.7e\n" % (in1.we[0],in1.wke[0],in1.ws[0]))  
   #        wt[itw,0:3] = [we[0],wke[0],0.0,ws[0]]
         in1.wt[in1.itw,:] = [in1.we[0],in1.wke[0],0.0,in1.ws[0]]
         in1.timeHistory[in1.itw] = ntime
         pc.showEnergy(in1.timeHistory, in1.wt[:,3], in1.itw )
         in1.itw = in1.itw + 1
   if in1.treverse == 1:
      in1.curtime -= in1.dt
   else:
      in1.curtime += in1.dt
   """while True:
      if pc.child_conn.poll():
         print pc.child_conn.recv()
      else:
         break"""

#pc = PContext()

class RunSimulation(threading.Thread):
	def __init__(self,notify_window):
		"""Init Worker Thread Class."""
		threading.Thread.__init__(self)
		self._notify_window = notify_window
		pc._notify_window= notify_window
		self._want_abort = 0
		self.initFortran()
		self.start()

	def initFortran(self):
		self.fC = 0
		self.curTime = 0
		initPlasma(self)
		True

	def run(self):
		while self.step() == 0:
			True


	def step(self):
		#Python Changes
		self.fC += 1
		postCount = 1

		step(self.fC, self)

		#Python Enhancements
		wx.PostEvent(self._notify_window, SimTimeEvent(self.curTime) )
		#self.curTime += in1.dt
		return postCount